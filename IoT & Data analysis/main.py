import csv
import socket
from influxdb_client import InfluxDBClient, Point
from influxdb_client.client.write_api import SYNCHRONOUS
from time import sleep
import time
import datetime
global list_alldata
global count
import schedule

# the Declaration list
serverip = "185.222.***.***"
serverport = ****
token = "qIWnhKmJf6DrfDHmaI2FHyyrU3eLnuMvVw01lP4U4xn99NtUW4s2cr9NOcMEa9kr_gbGEOXpRThAgRTK2zxBEA=="
org = "test"
bucket_Skarpt = "skarpt"
bucket_Hold = "Hold"
Temp_str = ""
Hum_str = ""
Hum_list = []
Temp_list = []
dectionary_list = []
final = []
humidity = []
tempreture = []
num_date = []
time = []
hum_loop = []
count = 0


# Test server connection
def server_connect():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.connect((serverip, serverport))
            return True
        except:
            print("nope")


#  open CSV
def open_CSVfile():
    global count
    with open("Readings.csv") as csvfile:
        reader = csv.DictReader(csvfile)
        for raw in reader:
            count += 1
            all_data = raw["File generated by GSOFT40k V7.240"]
            list_alldata = all_data.split()
            final.append(list_alldata)
    del final[0:19]
    for index in final:
        count += 1
        tempreture.append(index[3])
        num_date.append(index[0])
        time.append(index[1])
        hum_loop.append(index[2])
    for semi in hum_loop:
        count += 1
        humidity.append(semi[0:4])
    for raw in humidity:
        count += 1
        hmm = str(raw).replace(";", "")
        Hum_str = float(hmm)
        Hum_list.append(Hum_str)
    for raw in tempreture:
        count += 1
        tmm = str(raw).replace(";", "")
        Temp_str = float(tmm)
        Temp_list.append(Temp_str)




 # Push DATA to  Skarpt database
def Skarpt_database():
    with InfluxDBClient(url="http://localhost:8086", token=token, org=org) as client:
        write_api = client.write_api(write_options=SYNCHRONOUS)
        query_api = client.query_api()
        for i, x in zip(Temp_list, Hum_list):  # zip function to loop on two lists in the same time
            global count
            count += 1
            p = Point("Real").field("Temperature", i).field("Humidity", x)
            sleep(0.5)
            write_api.write(bucket_Skarpt, org, p)
            print("Skarpt Database saved Tempreture\t" + str(i) + "\t" + "Skarpt Database saved Humidity\t" + str(x))


#  push Data to Hold database
def Hold_database():
    with InfluxDBClient(url="http://localhost:8086", token=token, org=org) as client:
        write_api = client.write_api(write_options=SYNCHRONOUS)
        query_api = client.query_api()
        for i, x in zip(Temp_list, Hum_list):
            global count
            count += 1
            p = Point("Real").field("Temperature", i).field("Humidity", x)
            sleep(0.5)
            write_api.write(bucket_Hold, org, p)
            print("Hold Database saved Tempreture\t" + str(i) + "\t" + "Hold Database saved Tumidity\t" + str(x))


# Time section for getting data and send it to database
def time_csv():
    schedule.every(30).minutes.do(open_CSVfile)

def skarpt_time():
    schedule.every(1).minutes.do(Skarpt_database)
    while True:
        schedule.run_pending()
        sleep(0.5)

def hold_time():
    schedule.every(2).minutes.do(Hold_database)
    while True:
        schedule.run_pending()
        sleep(0.5)

open_CSVfile()
time_csv()
if server_connect():
    print("SERVER IS CONNECTING SUCCSESFULLY")
    print("SAVE DATA TO SKARPT DATABASE......")
    skarpt_time()
else:
    print("SERVER IS NOT CONNECTING...!!!!!")
    print("SAVE DATA TO HOLD DATABASE")
    hold_time()
